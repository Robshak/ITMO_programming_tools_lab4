name: Run Unit Tests

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      # Шаг 1: Клонируем репозиторий
      - name: Checkout repository
        uses: actions/checkout@v3

      # Шаг 2: Устанавливаем Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3

      # Работа с разными ОС
      - name: Install build tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y g++ make

      # Установка инструментов для Windows
      - name: Install build tools (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install mingw -y
          echo C:\ProgramData\chocolatey\lib\mingw\tools\install\bin >> $GITHUB_PATH

      # Компиляция C++ библиотеки для Linux
      - name: Build C++ library (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: g++ -shared -o CPPProject/libsegment_tree.so CPPProject/segment_tree.cpp -fPIC

      # Компиляция C++ библиотеки для Windows
      - name: Build C++ library (Windows)
        if: matrix.os == 'windows-latest'
        run: g++ -shared -o CPPProject/libsegment_tree.dll CPPProject/segment_tree.cpp

      - name: Check if DLL file exists (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if exist "CPPProject\libsegment_tree.dll" (
            echo "DLL file exists!"
          ) else (
            echo "DLL file not found!"
            exit 1
          )

      # Шаг 4: Устанавливаем зависимости
      - name: Install Python dependencies
        run: |
          python get-pip.py
          pip install pytest

      # Шаг 5: Запуск тестов
      - name: Run tests
        run: python testCPP.py
